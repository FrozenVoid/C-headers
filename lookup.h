#pragma once
//lookup tables:
#include "argmanip.h" //for front slice
/* lookup table for dividing integers to 1024
e.g. instead of 2.0/3(where 3 is a dynamic var)
2.0*divide_double[3]-> 2.0*0.3333333333
Most compilers will manage to avoid (slow) floating
point division unless the divisor is dynamically
cast or created during runtime; in that case
the lookup table will be faster.
the lookup table is generated by a macro
which creates the constant array with divisots below maxdiv(
e.g. maxdiv=4-> /1,/1,/2,/3) .

gen_lookup_div(name,type,maxdiv)
example;
gen_lookup_div(divide_double,double,1024) //more than 1023 is not supported(range 1-1023)
-> const double divide_double[1024]={divisors}
*/

#define gen_lookup_div1(v) 1.0/v
#define gen_lookup_div(name,type,maxdiv)  const type name[maxdiv]={frontslice(maxdiv,1,chainapply((type)gen_lookup_div1,num1_1023))};
